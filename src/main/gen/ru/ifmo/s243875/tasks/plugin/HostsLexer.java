/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.ifmo.s243875.tasks.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import ru.ifmo.s243875.tasks.plugin.psi.HostsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Hosts.flex</tt>
 */
class HostsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_KEY_VALUE_SEPARATOR_HEAD = 2;
  public static final int IN_KEY_VALUE_SEPARATOR_TAIL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\1\1\4\1\2\22\0\1\3\1\5\1\0\1\5\11\0\1\20\1\14\1\0\1\10\1\12"+
    "\1\6\2\13\1\7\4\11\1\16\6\0\6\15\24\17\6\0\6\15\24\17\12\0\1\1\242\0\2\1\26"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\6\1\1\4\1\5"+
    "\1\6\7\0\1\7\10\0\6\7\5\0\11\7\7\0"+
    "\5\7\1\0\2\7\5\0\14\7\2\0\5\7\1\0"+
    "\2\7\3\0\7\7\2\0\5\7\1\0\1\7\3\0"+
    "\7\7\2\0\5\7\1\0\1\7\3\0\7\7\6\0"+
    "\5\7\1\0\1\7\6\0\3\7\2\0\2\7\1\0"+
    "\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\63\0\104\0\104\0\125"+
    "\0\146\0\167\0\210\0\231\0\252\0\273\0\314\0\335"+
    "\0\356\0\104\0\377\0\u0110\0\u0121\0\u0132\0\u0143\0\u0154"+
    "\0\u0165\0\356\0\u0176\0\u0187\0\u0198\0\u01a9\0\u01ba\0\u01cb"+
    "\0\u01dc\0\u01ed\0\u01fe\0\u020f\0\u0220\0\u0231\0\u0242\0\u0253"+
    "\0\u0264\0\u0275\0\u0286\0\u0297\0\u02a8\0\u02b9\0\u02ca\0\u02db"+
    "\0\u02ec\0\u02fd\0\u030e\0\u031f\0\u0330\0\u01ed\0\u0341\0\u0352"+
    "\0\u0363\0\u0374\0\u0385\0\u0396\0\u03a7\0\u03b8\0\u03c9\0\u03da"+
    "\0\u03eb\0\u03a7\0\u03fc\0\u040d\0\u041e\0\u042f\0\u0440\0\u0451"+
    "\0\u0462\0\u0473\0\u0484\0\u0495\0\u04a6\0\u04b7\0\u04c8\0\u04d9"+
    "\0\u04ea\0\u04fb\0\u050c\0\63\0\u051d\0\u052e\0\u053f\0\u0550"+
    "\0\u0561\0\u0572\0\u0583\0\u0594\0\u0550\0\u05a5\0\u05b6\0\u05c7"+
    "\0\u05d8\0\u05e9\0\u05fa\0\u060b\0\u061c\0\u062d\0\u063e\0\u064f"+
    "\0\u0660\0\u0671\0\u0682\0\u0693\0\u06a4\0\u06b5\0\u06c6\0\u06d7"+
    "\0\u0693\0\u06e8\0\u06f9\0\u070a\0\u071b\0\u072c\0\u073d\0\u074e"+
    "\0\u075f\0\u0770\0\u0781\0\u0792\0\u07a3\0\u07b4\0\u07c5\0\u07d6"+
    "\0\u07e7\0\u07f8\0\u0809\0\u07c5\0\u081a\0\u082b\0\u083c\0\u084d"+
    "\0\u085e\0\u086f\0\u0880\0\u0891\0\u08a2\0\u08b3\0\u08c4\0\u08d5"+
    "\0\u08e6\0\u08f7\0\u0908\0\u0919\0\u092a\0\u093b\0\u094c\0\u095d"+
    "\0\u096e\0\u097f\0\u093b\0\u0990\0\u09a1\0\u09b2\0\u09c3\0\u09d4"+
    "\0\u09e5\0\u09f6\0\u0a07\0\u0a18\0\u0a29\0\u0a3a\0\u0a4b\0\u0a5c"+
    "\0\u0a6d\0\u0a7e\0\u0a8f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\6\1\10\1\11\1\12"+
    "\1\13\1\12\1\14\1\12\1\4\1\15\1\16\3\4"+
    "\1\5\1\6\1\17\1\6\15\4\1\5\1\6\1\20"+
    "\1\6\1\10\7\4\1\21\1\4\1\21\1\4\22\0"+
    "\1\5\1\6\1\22\1\6\14\0\2\10\1\0\16\10"+
    "\6\0\1\23\1\24\1\23\1\25\2\23\1\26\1\27"+
    "\1\30\10\0\6\25\1\26\1\27\1\30\10\0\6\27"+
    "\1\26\1\27\1\30\10\0\6\23\1\26\1\27\1\30"+
    "\10\0\6\27\1\0\1\27\1\30\20\0\1\31\3\0"+
    "\1\5\1\6\1\17\1\6\15\0\1\5\1\6\1\20"+
    "\1\6\22\0\6\21\1\32\1\21\1\0\1\21\1\32"+
    "\6\0\6\33\1\26\1\34\1\30\10\0\3\33\1\34"+
    "\2\33\1\26\1\34\1\30\10\0\6\34\1\26\1\34"+
    "\1\30\10\0\1\35\1\36\1\37\1\36\1\40\1\36"+
    "\13\0\6\34\1\0\1\34\1\30\10\0\6\41\1\0"+
    "\1\41\1\42\10\0\1\43\1\44\1\45\1\44\1\46"+
    "\1\44\1\0\1\47\11\0\6\50\1\26\1\50\1\30"+
    "\10\0\6\50\1\0\1\50\1\30\10\0\1\36\1\51"+
    "\1\36\1\37\2\36\1\52\12\0\6\37\1\52\20\0"+
    "\1\52\12\0\6\36\1\52\12\0\6\53\1\0\1\53"+
    "\1\54\10\0\1\55\1\56\1\57\1\56\1\60\1\56"+
    "\1\0\1\61\11\0\1\62\1\63\1\62\1\64\2\62"+
    "\1\26\1\65\1\66\10\0\6\64\1\26\1\65\1\66"+
    "\10\0\6\65\1\26\1\65\1\66\10\0\6\62\1\26"+
    "\1\65\1\66\10\0\6\65\1\0\1\65\1\66\20\0"+
    "\1\30\10\0\3\37\1\0\2\37\1\52\12\0\1\67"+
    "\1\70\1\71\1\70\1\72\1\70\13\0\6\73\1\0"+
    "\1\73\1\54\10\0\6\74\1\0\1\74\1\75\10\0"+
    "\1\76\1\77\1\76\1\100\2\76\1\26\1\101\1\102"+
    "\10\0\6\100\1\26\1\101\1\102\10\0\6\101\1\26"+
    "\1\101\1\102\10\0\6\76\1\26\1\101\1\102\10\0"+
    "\6\101\1\0\1\101\1\102\10\0\6\103\1\26\1\104"+
    "\1\66\10\0\3\103\1\104\2\103\1\26\1\104\1\66"+
    "\10\0\6\104\1\26\1\104\1\66\10\0\6\104\1\0"+
    "\1\104\1\66\10\0\1\70\1\105\1\70\1\71\2\70"+
    "\1\106\12\0\6\71\1\106\20\0\1\106\12\0\6\70"+
    "\1\106\12\0\6\107\1\0\1\107\1\54\10\0\6\110"+
    "\1\0\1\110\1\111\10\0\1\112\1\113\1\114\1\113"+
    "\1\115\1\113\1\0\1\116\11\0\6\117\1\26\1\120"+
    "\1\102\10\0\3\117\1\120\2\117\1\26\1\120\1\102"+
    "\10\0\6\120\1\26\1\120\1\102\10\0\6\120\1\0"+
    "\1\120\1\102\10\0\6\121\1\26\1\121\1\66\10\0"+
    "\6\121\1\0\1\121\1\66\10\0\3\71\1\0\2\71"+
    "\1\106\12\0\1\122\1\123\1\124\1\123\1\125\1\123"+
    "\23\0\1\54\10\0\6\126\1\0\1\126\1\111\10\0"+
    "\6\127\1\0\1\127\1\130\10\0\1\131\1\132\1\131"+
    "\1\133\2\131\1\26\1\134\1\135\10\0\6\133\1\26"+
    "\1\134\1\135\10\0\6\134\1\26\1\134\1\135\10\0"+
    "\6\131\1\26\1\134\1\135\10\0\6\134\1\0\1\134"+
    "\1\135\10\0\6\136\1\26\1\136\1\102\10\0\6\136"+
    "\1\0\1\136\1\102\20\0\1\66\10\0\1\123\1\137"+
    "\1\123\1\124\2\123\13\0\6\124\13\0\6\123\13\0"+
    "\6\140\1\0\1\140\1\111\10\0\6\141\1\0\1\141"+
    "\1\142\10\0\1\143\1\144\1\145\1\144\1\146\1\144"+
    "\1\0\1\147\11\0\6\150\1\26\1\151\1\135\10\0"+
    "\3\150\1\151\2\150\1\26\1\151\1\135\10\0\6\151"+
    "\1\26\1\151\1\135\10\0\6\151\1\0\1\151\1\135"+
    "\20\0\1\102\10\0\3\124\1\0\2\124\23\0\1\111"+
    "\10\0\6\152\1\0\1\152\1\142\10\0\6\153\1\0"+
    "\1\153\1\154\10\0\1\155\1\156\1\155\1\157\2\155"+
    "\1\26\1\160\1\161\10\0\6\157\1\26\1\160\1\161"+
    "\10\0\6\160\1\26\1\160\1\161\10\0\6\155\1\26"+
    "\1\160\1\161\10\0\6\160\1\0\1\160\1\161\10\0"+
    "\6\162\1\26\1\162\1\135\10\0\6\162\1\0\1\162"+
    "\1\135\10\0\6\163\1\0\1\163\1\142\10\0\6\164"+
    "\1\0\1\164\1\165\10\0\1\166\1\167\1\170\1\167"+
    "\1\171\1\167\1\0\1\172\11\0\6\173\1\26\1\174"+
    "\1\161\10\0\3\173\1\174\2\173\1\26\1\174\1\161"+
    "\10\0\6\174\1\26\1\174\1\161\10\0\6\174\1\0"+
    "\1\174\1\161\20\0\1\135\20\0\1\142\10\0\6\175"+
    "\1\0\1\175\1\165\10\0\6\176\1\0\1\176\1\177"+
    "\10\0\1\200\1\201\1\200\1\202\2\200\1\26\1\203"+
    "\1\204\10\0\6\202\1\26\1\203\1\204\10\0\6\203"+
    "\1\26\1\203\1\204\10\0\6\200\1\26\1\203\1\204"+
    "\10\0\6\203\1\0\1\203\1\204\10\0\6\205\1\26"+
    "\1\205\1\161\10\0\6\205\1\0\1\205\1\161\10\0"+
    "\6\206\1\0\1\206\1\165\10\0\6\207\1\0\1\207"+
    "\1\210\10\0\1\211\1\212\1\213\1\212\1\214\1\212"+
    "\1\0\1\215\11\0\6\216\1\26\1\217\1\204\10\0"+
    "\3\216\1\217\2\216\1\26\1\217\1\204\10\0\6\217"+
    "\1\26\1\217\1\204\10\0\6\217\1\0\1\217\1\204"+
    "\20\0\1\161\20\0\1\165\10\0\6\220\1\0\1\220"+
    "\1\210\10\0\1\221\1\222\1\223\1\222\1\224\1\222"+
    "\1\0\1\225\1\226\10\0\1\227\1\230\1\227\1\231"+
    "\2\227\1\26\1\232\1\233\10\0\6\231\1\26\1\232"+
    "\1\233\10\0\6\232\1\26\1\232\1\233\10\0\6\227"+
    "\1\26\1\232\1\233\10\0\6\232\1\0\1\232\1\233"+
    "\10\0\6\234\1\26\1\234\1\204\10\0\6\234\1\0"+
    "\1\234\1\204\10\0\6\235\1\0\1\235\1\210\10\0"+
    "\1\236\1\237\1\236\1\240\2\236\1\26\1\241\1\242"+
    "\10\0\6\240\1\26\1\241\1\242\10\0\6\241\1\26"+
    "\1\241\1\242\10\0\6\236\1\26\1\241\1\242\10\0"+
    "\6\241\1\0\1\241\1\242\10\0\6\243\1\0\1\243"+
    "\11\0\6\244\1\26\1\245\1\233\10\0\3\244\1\245"+
    "\2\244\1\26\1\245\1\233\10\0\6\245\1\26\1\245"+
    "\1\233\10\0\6\245\1\0\1\245\1\233\20\0\1\204"+
    "\20\0\1\210\10\0\6\246\1\26\1\247\1\242\10\0"+
    "\3\246\1\247\2\246\1\26\1\247\1\242\10\0\6\247"+
    "\1\26\1\247\1\242\10\0\6\247\1\0\1\247\1\242"+
    "\10\0\6\243\1\0\1\243\1\124\10\0\6\250\1\0"+
    "\1\250\11\0\6\251\1\26\1\251\1\233\10\0\6\251"+
    "\1\0\1\251\1\233\10\0\6\252\1\26\1\252\1\242"+
    "\10\0\6\252\1\0\1\252\1\242\10\0\6\253\1\0"+
    "\1\253\21\0\1\233\20\0\1\242\10\0\6\124\1\0"+
    "\1\124\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\14\1\7\0\1\1\10\0\6\1\5\0"+
    "\11\1\7\0\5\1\1\0\2\1\5\0\12\1\1\11"+
    "\1\1\2\0\5\1\1\0\2\1\3\0\7\1\2\0"+
    "\5\1\1\0\1\1\3\0\7\1\2\0\5\1\1\0"+
    "\1\1\3\0\7\1\6\0\5\1\1\0\1\1\6\0"+
    "\3\1\2\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HostsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error: " + this.zzLexicalState + " " + this.yytext());  return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 8: break;
          case 2: 
            { System.out.println("State: " + this.zzLexicalState + " " + this.yytext());  yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 9: break;
          case 3: 
            { System.out.println("Comment: " + this.zzLexicalState + " " + this.yytext()); yybegin(YYINITIAL); return HostsTypes.COMMENT;
            } 
            // fall through
          case 10: break;
          case 4: 
            { System.out.println("Space: " + this.zzLexicalState + " " + this.yytext()); yybegin(IN_KEY_VALUE_SEPARATOR_TAIL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 11: break;
          case 5: 
            { System.out.println("Space: " + this.zzLexicalState + " " + this.yytext());  yybegin(IN_KEY_VALUE_SEPARATOR_TAIL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 12: break;
          case 6: 
            { System.out.println("Domain: " + this.zzLexicalState + " " + this.yytext()); yybegin(IN_KEY_VALUE_SEPARATOR_TAIL); return HostsTypes.VALUE;
            } 
            // fall through
          case 13: break;
          case 7: 
            { System.out.println("IP: " + this.zzLexicalState + " " + this.yytext()); yybegin(IN_KEY_VALUE_SEPARATOR_HEAD); return HostsTypes.IP;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
